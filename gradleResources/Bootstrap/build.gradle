/*
 * Copyright 2014-2019 Riccardo Massera (TheCoder4.Eu)
 *
 * This file is part of BootsFaces.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Apply the plugin to add support for Bootstrap download
plugins {
    id "de.undercouch.download" version "3.1.0"
}

import de.undercouch.gradle.tasks.download.Download

ext.downloadBootstrapURL = 'https://github.com/twbs/bootstrap/archive/v'+BootstrapVersion+'.zip'

def bootstrapZip = new File(buildDir, 'bootstrap'+BootstrapVersion+'.zip')

ext.downloadBootswatchURL = 'https://github.com/thomaspark/bootswatch/archive/v'+BootswatchFullVersion+'.zip'
ext.bootswatchZipFolder = 'bootswatch-'+BootswatchFullVersion.replace('+','-')
//ext.zipFile = zipFolder+'.zip'

def bootswatchZip = new File(buildDir, 'bootswatch-'+BootswatchFullVersion.replace('+','-')+'.zip')

ext.downloadPatternFlyURL = 'https://github.com/patternfly/patternfly/archive/v'+PatternFlyVersion+'.zip'

def PatternFlyZip = new File(buildDir, 'patternfly-'+PatternFlyVersion+'.zip')

task themesTask {
   println "Bootstrap: Configured themes:"
   themes.each {
   println "Theme ${it}"
   }
}

/**
 * The following two tasks downloads a ZIP file and extracts its
 * contents to the build directory
 */
task downloadBootstrapZipFile(type: Download) {
    src downloadBootstrapURL
    dest bootstrapZip //new File(buildDir, 'bootstrap'+BootstrapVersion+'.zip')
}
downloadBootstrapZipFile.onlyIf { !bootstrapZip.exists() }

task downloadAndUnzipBootstrap(dependsOn: downloadBootstrapZipFile, type: Copy) {
    from zipTree(bootstrapZip)
    into "${buildDir}/extracted"
}

/**
 * The following two tasks downloads a ZIP file and extracts its
 * contents to the build directory
 */
task downloadBootswatchZipFile(type: Download) {
    src downloadBootswatchURL
    dest bootswatchZip //new File(buildDir, zipFile)
}
downloadBootswatchZipFile.onlyIf { !bootswatchZip.exists() }


themes.each {
    //create a dynamic task for each theme
    def targetName ->
    tasks.create(name: "themeTask$targetName", dependsOn: downloadBootswatchZipFile, type: Copy) {
        println "${project.name}: extracting bootswatch Theme themeTask$targetName"
        from zipTree(bootswatchZip)
        into "${buildDir}/extracted"
        include bootswatchZipFolder+"/"+targetName+"/*.less"
        doLast {

            //Patch for Font URL in Bootswatch v3.3.5+3 and later
            def lessfile="${buildDir}/extracted/"+bootswatchZipFolder+"/"+targetName+"/bootswatch.less"
            println 'INFO - patching:'+lessfile
            def bswFile = new File( lessfile )
            String contents = bswFile.getText( 'UTF-8' )

            def fonturlexp=/(\@[A-Za-z\-\_]*font[A-Za-z\-\_]*)\s*\:\s*\"(http[^"]+)\"\s*\;/
            def matcher = (contents=~ fonturlexp)
            if (matcher.getCount()>0) {
                def fontvar=matcher[0][1]
                def fonturl=matcher[0][2]
                contents=contents.replaceFirst(/\s*\@import\s+url\(\s*"\@\{\w+\}"\s*\)\s*\;/,'')
                contents=contents.replaceFirst(/\.[A-Za-z\-\_]+\s*\(\s*${fontvar}\s*\)\s*\;/,'')
                contents=contents.replaceFirst( fonturlexp ) { '@import url("'+it[2]+'");' }
            }

            bswFile.write( contents, 'UTF-8' )
        }
    }
}

task themesTaskAll (dependsOn: ['downloadBootswatchZipFile',tasks.matching { Task task -> task.name.startsWith("themeTask")}]) {
println "${project.name}: INFO: Processing Bootswatch Themes:"
}
themesTaskAll.onlyIf { themes.size() > 0 }
/**
 * The following two tasks downloads a ZIP file and extracts its
 * contents to the build directory
 */
task downloadPatternFlyZipFile(type: Download) {
    src downloadPatternFlyURL
    dest PatternFlyZip //new File(buildDir, 'bootstrap'+BootstrapVersion+'.zip')
}
downloadPatternFlyZipFile.onlyIf { !PatternFlyZip.exists() }

task downloadAndUnzipPatternFly(dependsOn: downloadPatternFlyZipFile, type: Copy) {
    from zipTree(PatternFlyZip)
    into "${buildDir}/extracted"
}
downloadAndUnzipPatternFly.onlyIf { (PatternFlyVersion!=null) && (PatternFlyVersion.length()>0) }

task downloadResources(dependsOn: ['downloadAndUnzipBootstrap', 'themesTaskAll', 'downloadAndUnzipPatternFly']) {
  description 'downloadResources task: downloads and unzips Bootstrap and Bootswatch(if needed).'
}
